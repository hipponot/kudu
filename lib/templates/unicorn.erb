# set path to app that will be used to configure unicorn, 
# note the trailing slash in this example
dir = File.join(File.expand_path(File.dirname(__FILE__ )), File::SEPARATOR)

# Set number of unicorn workers from the environment or use default
worker_env = '<%="#{project_name.upcase}_WORKERS"%>'
nworker = ENV.has_key?(worker_env) ? ENV[worker_env].to_i : <%=num_workers%>
puts "Number of unicorn workers set to #{nworker}"
worker_processes nworker

working_directory dir
timeout 60
preload_app true

# Application directories
FileUtils.mkdir_p "#{ENV['HOME']}/unicorn/sockets/<%=project_name%>-<%=project_version%>"
FileUtils.mkdir_p "#{ENV['HOME']}/unicorn/pids/<%=project_name%>-<%=project_version%>"
FileUtils.mkdir_p "/var/log/unicorn/<%=project_name%>-<%=project_version%>"

# Specify path to socket unicorn listens to, 
# we will use this in our nginx.conf later
listen "#{ENV['HOME']}/unicorn/sockets/<%=project_name%>-<%=project_version%>/unicorn.sock", :backlog => 1024

# Set process id path
pid "#{ENV['HOME']}/unicorn/pids/<%=project_name%>-<%=project_version%>/unicorn.pid"

# Set log file paths
stderr_path "/var/log/unicorn/<%=project_name%>-<%=project_version%>/stderr.log"
stdout_path "/var/log/unicorn/<%=project_name%>-<%=project_version%>/stdout.log"
